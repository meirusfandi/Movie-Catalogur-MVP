package com.example.root.moviecatalogue.views.navigasi;import android.content.Intent;import android.os.Build;import android.os.Bundle;import android.os.Parcelable;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.annotation.RequiresApi;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import com.example.root.moviecatalogue.R;import com.example.root.moviecatalogue.adapter.MyAdapter;import com.example.root.moviecatalogue.baseMVP.BaseFragment;import com.example.root.moviecatalogue.baseMVP.RecyclerviewClickListener;import com.example.root.moviecatalogue.detailAct.MovieDetailActivity;import com.example.root.moviecatalogue.model.MovieModel;import com.example.root.moviecatalogue.network.MovieService;import java.util.ArrayList;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import io.reactivex.disposables.CompositeDisposable;public class MainFragment extends BaseFragment implements MainView, RecyclerviewClickListener{    @BindView(R.id.refresh)    protected SwipeRefreshLayout refreshLayout;    @BindView(R.id.recyclerview)    private RecyclerView recyclerView;    protected MyAdapter<MovieModel, MainHolder> adapter;    protected List<MovieModel> movieModels = new ArrayList<>();    protected MainPresenter<MainView, MainInteractor> presenter;    @RequiresApi(api = Build.VERSION_CODES.M)    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {        View view = LayoutInflater.from(getContext()).inflate(R.layout.fragment_home, container, false);        setUnbinder(ButterKnife.bind(this, view));        return view;    }    @RequiresApi(api = Build.VERSION_CODES.M)    @Override    protected void setUp(View view) {        final MainInteractor interactor = new MainInteractorClass(MovieService.ServiceGetMovie.instance(), getContext());        presenter = new MainPresenter<>(interactor, new CompositeDisposable());        presenter.onAttach(this);        recyclerView.setHasFixedSize(true);        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(getContext(), LinearLayoutManager.VERTICAL, false);        recyclerView.setLayoutManager(layoutManager);        adapter = new MyAdapter<MovieModel, MainHolder>(R.layout.movie_item, MainHolder.class, movieModels, this) {            @Override            protected void bindView(MainHolder holder, MovieModel movie, int position) {                holder.bind(movie, getContext());            }        };        recyclerView.setAdapter(adapter);    }    @Override    public void onDestroy() {        super.onDestroy();        presenter.onDetach();    }    @Override    public void onSaveInstanceState(@NonNull Bundle savedInstanceState) {        super.onSaveInstanceState(savedInstanceState);        savedInstanceState.putParcelableArrayList("movies", (ArrayList<? extends Parcelable>) movieModels);    }    @RequiresApi(api = Build.VERSION_CODES.M)    @Override    public void onItemClick(int id) {        MovieModel movieModel = movieModels.get(id);        Intent intent = new Intent(getContext(), MovieDetailActivity.class);        intent.putExtra(MovieDetailActivity.MOVIE_INTENT, movieModel);        startActivity(intent);    }    @Override    public void showLoading(boolean isShowLoading) {        if (isShowLoading) {            recyclerView.setVisibility(View.VISIBLE);            refreshLayout.setVisibility(View.GONE);        } else {            refreshLayout.setVisibility(View.VISIBLE);        }    }    @Override    public void displayMovies(List<MovieModel> movieModels) {        this.movieModels.clear();        this.movieModels.addAll(movieModels);        recyclerView.setVisibility(View.VISIBLE);        adapter.notifyDataSetChanged();    }}